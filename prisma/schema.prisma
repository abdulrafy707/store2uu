datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  email     String?   @unique
  password  String?
  name      String?
  role      String?
  imageUrl  String?   // Adding image URL for the user profile picture
  phoneno   String?
  city      String?
  balance   Float?
  status    Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  imageUrl      String?        // Making imageUrl optional temporarily
  subcategories Subcategory[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Subcategory {
  id          Int          @id @default(autoincrement())
  name        String
  imageUrl    String?  
  categoryId  Int
  category    Category     @relation(fields: [categoryId], references: [id])
  products    Product[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  subcategoryId Int
  subcategory Subcategory  @relation(fields: [subcategoryId], references: [id])
  images      Image[]      // Relation to images
  colors      Json?        // Making colors optional
  sizes       Json?        // Making sizes optional
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orderItems  OrderItem[]
}

model Image {
  id         Int       @id @default(autoincrement())
  url        String
  productId  Int
  product    Product   @relation(fields: [productId], references: [id])
  createdAt  DateTime  @default(now())
}

model Order {
  id             Int          @id @default(autoincrement())
  userId         Int
  total          Float
  status         OrderStatus
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  recipientName  String?
  streetAddress  String?
  apartmentSuite String?
  city           String?
  state          String?
  zip            String?
  country        String?
  phoneNumber    String?
  email          String?
  paymentMethod  String?
  paymentInfo    Json?
  orderItems     OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}


enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

